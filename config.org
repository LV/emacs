#+TITLE: LV's Emacs Configuration
#+AUTHOR: Luis Victoria
#+PROPERTY: header-args :tangle yes

** Pre-requisites
You *must* do the following to get the configuration to fully work
*** Programs
- Latex
  - On MacOS:
#+BEGIN_SRC bash :tangle no
  brew install --cask mactex-no-gui
#+END_SRC
    - On Linux:
#+BEGIN_SRC bash :tangle no
  sudo apt-get install texlive-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended dvipng
#+END_SRC

*** Fonts
- [[https://fsd.it/shop/fonts/pragmatapro/][PragmataPro Mono Liga]] (Not free)
  - Alternatively, any [[https://www.nerdfonts.com/][Nerd Font]] should work
- [[https://edwardtufte.github.io/et-book/][ET Book]]

  Evaluate the following commands in Emacs
#+BEGIN_SRC emacs-lisp :tangle no
  (all-the-icons-install-fonts)
  (nerd-fonts-install-fonts)
#+END_SRC

**** Troubleshooting
***** Windows
Don't use Windows (and if you do, use WSL)

** Configuration
*** Changing Emacs defaults
**** Startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
**** Backup files
Say that you're editing the file =foo.py=. Annoyingly, Emacs will create the file =foo.py~= as a backup file and will create =#foo.py#= if the file is currently being edited. We want to disable this.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

**** Rest of the config
This is from the monolithic =init.el= config. This block will slowly be migrated into the rest of the config
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)    ; Disable visible scrollbar
  (tool-bar-mode -1)      ; Disable toolbar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 10)    ; Add fringe space to the left and right of the buffer

  (menu-bar-mode 1)       ; Enable the menu bar

  (setq visible-bell nil) ; If true, replaces sound bell for visual cue when performing action that can't be done
                          ;   (e.g. backspacing on the first line of the document, down arrow on last line, etc)
                          ; On MacOS, this makes a large caution triangle which can be very annoying, so perhaps disable if using Mac

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)  ; Enable line numbers
  (setq column-number-mode t) ; Enable column char number
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :font "PragmataPro Mono Liga" :height 150)

  (load-theme 'tango-dark)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)  ; Make ESC quit prompts

  ;; Initialize package sources
  (require 'package)    ; Brings in the package management functions into the environment

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)  ; Initialize the package system and prepares it to be used
  (unless package-archive-contents  ; refresh contents only if packages don't exist
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Vim Mode
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ; (setq evil-want-C-u-scroll t)
    ; (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1) ; turn on Evil mode
    ; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ; I think this is the same as just hitting escape when you're not in insert mode
    ; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (define-key evil-normal-state-map (kbd "/") 'swiper)
    (define-key evil-visual-state-map (kbd "/") 'swiper))

  (use-package evil-collection
    :after (evil magit)
    :ensure t
    :config
    (evil-collection-init))

  ;; Completion framework
  (use-package ivy
    :diminish
    :bind ((:map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill))
           (:map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill)))
    :config
    (ivy-mode 1))

  ;; Search inside of an existing buffer
  (use-package swiper
    :after ivy)

  ;; Additional completion functions based on ivy
  (use-package counsel
    :after ivy)

  ;; Information bar at the bottom
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))

  ;; Themes for Emacs
  (use-package doom-themes
    :init (load-theme 'doom-Iosvkem t))

  ;; Colorizes parenthesis and braces
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Shows which keys to press for commands
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)) ; seconds

  ;; Alternative help screen
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;; NOTE: The first time you load this config onto a new machine, you'll need to run the following:
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  ;; Setup keybindings with a leader key
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer lv/leader-keys
      :states '(normal visual)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (lv/leader-keys
    ":"  '(counsel-M-x                   :which-key "M-x")

    "b"  '(:ignore b                     :which-key "buffer")
    "bs" '(counsel-switch-buffer         :which-key "switch")
    "be" '(eval-buffer                   :which-key "evaluate")
    ; "bi" '(counsel-ibuffer               :which-key "ibuffer")

    "f"  '(:ignore f                     :which-key "file")
    "ff" '(counsel-find-file             :which-key "find")

    "g"  '(:ignore g                     :which-key "git")
    "gg" '(magit-status                  :which-key "status")

    "h"  '(:ignore h                     :which-key "help")
    "hf" '(counsel-describe-function     :which-key "function")
    "hv" '(counsel-describe-variable     :which-key "variable")

    "o"  '(:ignore o                     :which-key "org")
    ; "oi" '(:ignore oi :which-key "insert")
    "oi" '(org-insert-structure-template :which-key "insert")

    "w"  '(:ignore w                     :which-key "window")
    "wh" '(evil-window-left              :which-key "move left")
    "wj" '(evil-window-down              :which-key "move down")
    "wk" '(evil-window-up                :which-key "move up")
    "wl" '(evil-window-right             :which-key "move right")
    "ws" '(evil-window-split             :which-key "split horizontally")
    "wv" '(evil-window-vsplit            :which-key "split vertically"))
#+END_SRC

** Git
#+BEGIN_SRC emacs-lisp
  ;; Git porcelain
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (add-hook 'with-editor-mode-hook 'evil-insert-state) ; immediately start in insert mode when writing commit message in Magit

  (use-package forge)
#+END_SRC

*** TODO
- [ ] Make ~<escape>~ key abort (give it the same behavior as ~C-g~) in =magit=

** Org-mode
#+BEGIN_SRC emacs-lisp
  ;; Potential packages to consider
  ; - hydra; perform repetitive keybindings much easier
  ;     See Emacs From Scratch #3
  ; - projectile; Additional intelligence for project logic
  ;     See Emacs From Scratch #4

  ;; TODO Continue with the Emacs from Scratch series
  ;    Finish the magit section
  (use-package org)
#+END_SRC

*** Padding
**** Line Spacing
Per buffer line spacing can be set using the variable ~line-spacing~. Something like ~0.1~ goes well here.
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0.1)
#+END_SRC

**** Top Padding
Setting format to empty string ~" "~ gives you top padding. Changing the header line face height will change the spacing
#+BEGIN_SRC emacs-lisp
  (setq header-line-format " ")
#+END_SRC

**** Side Padding
#+BEGIN_SRC emacs-lisp
  (lambda () (progn
    (setq left-margin-width 2)
    (setq right-margin-width 2)
    (set-window-buffer nil (current-buffer))))
#+END_SRC

*** Bullet points
Replace the ~-~ symbol with ~•~
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

*** Other tweaks
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-ellipsis "  " ; folding symbol
        org-pretty-entities t
        org-hide-emphasis-markers nil
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
#+END_SRC

**** Automatically render $LaTeX$ fragments
#+BEGIN_SRC emacs-lisp
  (defun my/org-latex-preview-auto ()
    "Automatically refresh LaTeX fragments in the current buffer."
    (when (derived-mode-p 'org-mode)
      (org-latex-preview '(16))))

  ;; Add hooks to automatically render LaTeX
  (add-hook 'org-mode-hook 'my/org-latex-preview-auto)
  (add-hook 'after-save-hook 'my/org-latex-preview-auto)
  (add-hook 'after-change-functions
            (lambda (_beg _end _len)
              (my/org-latex-preview-auto)))

  ;; Scale LaTeX font
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+END_SRC

**** Disable ~hl-line-mode~
  #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (hl-line-mode -1)))
#+END_SRC

**** Render the entire document before editing
#+BEGIN_SRC emacs-lisp
  (defun lv-org-render-before-editing () "Render whole Org buffer before editing"
    (read-only-mode 1)   ; Make the buffer temporarily read-only
    (font-lock-ensure)   ; Ensure the whole buffer is rendered
    (read-only-mode -1)) ; Allow editing again

  (add-hook 'org-mode-hook 'lv-org-render-before-editing)
#+END_SRC

*** TODO
- [ ] Once cursor is in a link, expand the code to show the ~\[\[link\]\[name\]\]~
  - Same for everything else, I want ~~~, ~/~, and ~$~ chars to show up when the cursor is inside and in insert mode
    - Same also applies for headings, I want to see the ~*~ chars
- Make indentation for org documents 2 spaces long
  - Fix indentations inside of code blocks (make them respect the languages inside of the code blocks
