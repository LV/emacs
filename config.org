#+TITLE: LV's Emacs Configuration
#+AUTHOR: Luis Victoria
#+PROPERTY: header-args :tangle yes

- The following =.org= file takes all the code blocks and compiles (or tangles) them into =config.el=, which =init.el= reads from.
  - This document will not have the best organization, and that's due to the constraint of needing to execute certain lines of code before others.

- Due to constraints with developing on remote machines, I am forced to use Neovim for development (I actually like it a lot, but no org-mode sadly)
  - Hence, I want to replicate as much of the behavior as possible between both configurations
  - [[https://github.com/LV/nvim-config][Link to my Neovim configuration]]
    - I may end up going for some weird dynamic where I use Neovim inside of Emacs that emulates a terminal (that uses ~tmux~). That sounds incredibly dumb (and it probably is), but I think that's what I may actually end up going for.

* Pre-requisites
You *must* do the following to get the configuration to fully work.

** Programs
*** Latex
*TODO*: Make it so that this configuration doesn't break if a Latex package is not detected

**** Linux
#+BEGIN_SRC bash :tangle no
  sudo apt-get install texlive-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended dvipng
#+END_SRC

**** MacOS
#+BEGIN_SRC bash :tangle no
  brew install --cask mactex-no-gui
#+END_SRC

*** ripgrep

** Fonts
- [[https://fsd.it/shop/fonts/pragmatapro/][PragmataPro Mono Liga]] (Not free)
  - Alternatively, any [[https://www.nerdfonts.com/][Nerd Font]] should work

Evaluate the following commands in Emacs:

#+BEGIN_SRC emacs-lisp :tangle no
  (all-the-icons-install-fonts)
  (nerd-fonts-install-fonts)
#+END_SRC

** Troubleshooting
**** Windows
Don't use Windows (and if you do, use WSL).

* Setting Up the Package Manager
Bring in the package management functions into the environment

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Set up package URLs

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode/elpa")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+END_SRC

Initialize the package system and prepare it to be used

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

Refresh contents only if packages don't exist

#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

Initialize ~use-package~ on non-Linux platforms

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+END_SRC

  #+BEGIN_SRC emacs-lisp
    (require 'use-package)

    (setq use-package-always-ensure t)
#+END_SRC

* Editor
** Startup Message
Start Emacs with a blank buffer instead of the welcome message.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Line Numbers
*** Relative Line Numbers
Better for using Vim commands.

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
#+END_SRC

*** Enable Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode t)
#+END_SRC

**** Exceptions
For some modes, line numbers add noise.

#+BEGIN_SRC emacs-lisp
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda ()
                     (display-line-numbers-mode 0))))
#+END_SRC

*** Column Number Mode
Displays the horizontal char position.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** Text Wrapping
I hate scrolling horizontally.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (cond
   ((eq system-type 'gnu/linux)  ; Linux
    (set-face-attribute 'default nil :font "PragmataPro Mono Liga" :height 150))
   ((eq system-type 'darwin)     ; MacOS
    (set-face-attribute 'default nil :font "PragmataPro Mono Liga" :height 200)))
#+END_SRC

** Toolbar
*** Disabling the Menu Bar
The menu bar is what has the /File/, /Edit/, /Options/, /Help/, etc. options at the top of the window.

Because we do everything through keyboard commands in Emacs, this is unnecessary and thus we disable it

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

* Behaviors
** Backup Files
Say that you're editing the file =foo.py=. Annoyingly, Emacs will create the file =foo.py~= as a backup file and will create =#foo.py#= if the file is currently being edited. We want to disable this.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Rest of the config
This is from the monolithic =init.el= config. This block will slowly be migrated into the rest of the config.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)    ; Disable visible scrollbar
  (tool-bar-mode -1)      ; Disable toolbar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 10)    ; Add fringe space to the left and right of the buffer

  (setq visible-bell nil) ; If true, replaces sound bell for visual cue when performing action that can't be done
                          ;   (e.g. backspacing on the first line of the document, down arrow on last line, etc)
                          ; On MacOS, this makes a large caution triangle which can be very annoying, so perhaps disable if using Mac


  (load-theme 'tango-dark)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)  ; Make ESC quit prompts

  ;; Initialize package sources

  ;; Vim Mode
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ; (setq evil-want-C-u-scroll t)
    ; (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1) ; turn on Evil mode
    ; (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ; I think this is the same as just hitting escape when you're not in insert mode
    ; (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (define-key evil-normal-state-map (kbd "/") 'swiper)
    (define-key evil-visual-state-map (kbd "/") 'swiper))

  (use-package evil-collection
    :after (evil magit)
    :ensure t
    :config
    (evil-collection-init))

  ;; Completion framework
  (use-package ivy
    :diminish
    :bind ((:map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill))
           (:map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill)))
    :config
    (ivy-mode 1))

  ;; Search inside of an existing buffer

  ;; Additional completion functions based on ivy
  (use-package counsel
    :after ivy)

  ;; Information bar at the bottom
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))

  ;; Themes for Emacs
  (use-package doom-themes
    :init (load-theme 'doom-Iosvkem t))

  ;; Colorizes parenthesis and braces
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Shows which keys to press for commands
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)) ; seconds

  ;; Alternative help screen
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;; NOTE: The first time you load this config onto a new machine, you'll need to run the following:
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)
#+END_SRC

* Modules
** Git
#+BEGIN_SRC emacs-lisp
  ;; Git porcelain
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (add-hook 'with-editor-mode-hook 'evil-insert-state) ; immediately start in insert mode when writing commit message in Magit

  (use-package forge)
#+END_SRC

*** TODO
- [ ] Make ~<escape>~ key abort (give it the same behavior as ~C-g~) in =magit=

** Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

*** Text
**** Show Leading Stars in Headers
I like seeing all the stars so I know which indentation level we're at.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local org-hide-leading-stars nil)))
#+END_SRC

**** Show Links
Modifying links in org-mode has been a real pain due to its default behavior of hiding the link. I want everything to show up.

#+BEGIN_SRC emacs-lisp
  (setq org-descriptive-links nil)
#+END_SRC

**** Bullet Points
Replace the ~-~ symbol with ~•~.

#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

**** Automatically Render $LaTeX$ Fragments
#+BEGIN_SRC emacs-lisp
  (defun lv/org-latex-preview-auto ()
    "Automatically refresh LaTeX fragments in the current buffer."
    (when (derived-mode-p 'org-mode)
      (org-latex-preview '(16))))

  ;; Add hooks to automatically render LaTeX
  (add-hook 'org-mode-hook 'lv/org-latex-preview-auto)
  (add-hook 'after-save-hook 'lv/org-latex-preview-auto)
  (add-hook 'after-change-functions
            (lambda (_beg _end _len)
              (lv/org-latex-preview-auto)))

  ;; Scale LaTeX font
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+END_SRC

**** Render Entire Document Before Editing
There's a bug where if you jump to any part of a document, code blocks will not be rendered until both its ~#+BEGIN_SRC~ and ~#+END_SRC~ tags are encountered.

By rendering the entire document, code blocks will appear as they should, new code blocks will not have this problem since as you write them, you will 'encounter' it.

#+BEGIN_SRC emacs-lisp
  (defun lv-org-render-before-editing () "Render whole Org buffer before editing"
    (read-only-mode 1)   ; Make the buffer temporarily read-only
    (font-lock-ensure)   ; Ensure the whole buffer is rendered
    (read-only-mode -1)) ; Allow editing again

  (add-hook 'org-mode-hook 'lv-org-render-before-editing)
#+END_SRC

*** Padding
**** Line Spacing
Per buffer line spacing can be set using the variable ~line-spacing~. Something like ~0.1~ goes well here.
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0.1)
#+END_SRC

**** Top Padding
Setting format to empty string ~" "~ gives you top padding. Changing the header line face height will change the spacing
#+BEGIN_SRC emacs-lisp
  (setq header-line-format " ")
#+END_SRC

**** Side Padding
#+BEGIN_SRC emacs-lisp
  (lambda ()
    (progn
      (setq left-margin-width 2)
      (setq right-margin-width 2)
      (set-window-buffer nil (current-buffer))))
#+END_SRC

*** Evil (Vim)
**** Code Blocks
When editing source code blocks in org-mode, you will encounter many difficulties in getting the indentation right. This is due to the conflicts of org-mode's indentation with the one you're trying to do for your code (minor mode).

When you're in major mode (i.e. normal code editing in its own buffer), you will not experience these issues.

Thus, the best way to edit such code is through ~(org-edit-special)~ (which can be invoked using ={SPC o e}=. This will open the code block in its own buffer and you'll be able to have the full normal coding experience you're used to.

However, the saving (={C-c '}=) and aborting (={C-c C-k}=) commands are ugly Emacs bindings, and we want to do it the Vim way through ~:w~, ~:wq~, or ~:q~ (~:q!~ works too).

#+BEGIN_SRC emacs-lisp
  (defun lv/org-edit-src-save-only ()
    "Save changes in the special edit buffer without exiting."
    (interactive)
    (org-edit-src-save))

  (defun lv/org-edit-src-exit-save ()
    "Save changes and exit the special edit buffer."
    (interactive)
    (org-edit-src-exit))

  (defun lv/org-edit-src-abort ()
    "Abort the special edit without saving."
    (interactive)
    (org-edit-src-abort))

  (defun lv/setup-org-src-mode-evil-commands ()
    "Set up custom `:w`, `:wq`, and `:q` commands in `org-src-mode`."
    (evil-ex-define-cmd "w[rite]" 'lv/org-edit-src-save-only)
    (evil-ex-define-cmd "wq" 'lv/org-edit-src-exit-save)
    (evil-ex-define-cmd "q[uit]" 'lv/org-edit-src-abort))

  (defun lv/restore-evil-commands ()
    "Restore default `:w`, `:wq`, and `:q` Evil commands."
    (evil-ex-define-cmd "w[rite]" 'evil-write)
    (evil-ex-define-cmd "wq" 'evil-save-and-close)
    (evil-ex-define-cmd "q[uit]" 'evil-quit))

  (defun lv/setup-org-src-mode-hook ()
    "Hook to set up `org-src-mode`."
    ;; Set up custom commands for the current buffer only
    (lv/setup-org-src-mode-evil-commands)
    ;; Set up a buffer-local hook to restore commands on exit
    (add-hook 'kill-buffer-hook 'lv/restore-evil-commands nil t))

  ;; Add hook to org-src-mode to set up the custom commands
  (add-hook 'org-src-mode-hook 'lv/setup-org-src-mode-hook)
#+END_SRC

*** Other Tweaks
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-ellipsis "  " ; folding symbol
        org-pretty-entities t
        org-hide-emphasis-markers nil
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
#+END_SRC

**** Disable ~hl-line-mode~
Disables highlighting the line where the cursor is currently on.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (hl-line-mode -1)))
#+END_SRC

*** TODO
- Once cursor is in a link, expand the code to show the ~\[\[link\]\[name\]\]~
- Indentations (Evil's =SHIFT >= and =SHIFT <=) on headings should change the number of stars, not the actual indentation of the text

** Swiper
Swiper is used to search within the current buffer

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :config
    (evil-define-key 'normal swiper-map
      (kbd "n") 'swiper-next-line
      (kbd "N") 'swiper-previous-line))
#+END_SRC

*** Rebinds
With the default behavior, pressing =n= goes to the previous word whereas =C-n= goes to the next word. In Vim, it's =n= to go next and =Shift n= to go before

* Keybindings
** Leader Key
I like to use keybindings by pressing a leader key, which I map as the spacebar.

#+BEGIN_SRC emacs-lisp
  ;; Setup keybindings with a leader key
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer lv/leader-keys
      :states '(normal visual)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC"))
#+END_SRC

** =M-x=
The Meta key (=M-x=) is used to evaluate commands.

#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    ":" '(counsel-M-x :which-key "M-x"))
#+END_SRC

** Buffer
#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "b"  '(:ignore b             :which-key "buffer")
    "bs" '(counsel-switch-buffer :which-key "switch")
    "be" '(eval-buffer           :which-key "evaluate"))
#+END_SRC

** File
#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "f"  '(:ignore f         :which-key "file")
    "ff" '(counsel-find-file :which-key "find")
    "fc" '(lambda () (interactive)
            (find-file (concat user-emacs-directory "config.org"))
                             :which-key "open config")
    "fg" '(counsel-rg        :which-key "ripgrep"))
#+END_SRC

** Git
#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "g"  '(:ignore g    :which-key "git")
    "gg" '(magit-status :which-key "status"))
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "h"  '(:ignore h                 :which-key "help")
    "hf" '(counsel-describe-function :which-key "function")
    "hv" '(counsel-describe-variable :which-key "variable"))
#+END_SRC

** Org-mode
#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "o"  '(:ignore o                     :which-key "org")
    ; "oi" '(:ignore oi :which-key "insert")
    "oe" '(org-edit-special              :which-key "edit special")
    "oi" '(org-insert-structure-template :which-key "insert"))
#+END_SRC

** Window
The following is a helper function for toggling full screen on and off

As per [[https://emacs.stackexchange.com/a/9725][Stack Exchange]]:

#+BEGIN_SRC emacs-lisp
  (defun lv/fullscreen ()
    (interactive)
    (set-frame-parameter nil 'fullscreen 'fullboth))

  (defun lv/non-fullscreen ()
    (interactive)
    (set-frame-parameter nil 'width 82)
    (set-frame-parameter nil 'fullscreen 'fullheight))

  ; TODO: This is broken; toggling on FS works, toggling off works, toggling on works,
  ;   But then toggling off no longer works from that point formwards
  (defun toggle-fullscreen ()
    (interactive)
    (if (eq (frame-parameter nil 'fullscreen) 'fullboth)  ;tests if already fullscreened
        (lv/non-fullscreen)
      (lv/fullscreen)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (lv/leader-keys
    "w"  '(:ignore w          :which-key "window")
    "wf" '(toggle-fullscreen  :which-key "toggle fullscreen")
    "wh" '(evil-window-left   :which-key "move left")
    "wj" '(evil-window-down   :which-key "move down")
    "wk" '(evil-window-up     :which-key "move up")
    "wl" '(evil-window-right  :which-key "move right")
    "ws" '(evil-window-split  :which-key "split horizontally")
    "wv" '(evil-window-vsplit :which-key "split vertically"))
#+END_SRC

