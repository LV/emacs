#+TITLE: Org-mode Configuration
#+AUTHOR: Luis Victoria
#+PROPERTY: header-args :tangle yes

* Installation
#+begin_src emacs-lisp
  (use-package org
    :ensure (:type built-in))
#+end_src

* General Settings
** Main Directory
I treat everything ~org~ like a monolith, and have it live in a single main directory.
#+begin_src emacs-lisp
  (setq lv/org-directory "~/Vault")
#+end_src

** Indentation
/2 spaces/

#+begin_src emacs-lisp
  (defun lv/org-mode-setup ()
    "Set up Org-mode indentation preferences."
    (setq org-adapt-indentation nil) ; Disable adaptive indentation for clean look
    (setq org-indent-indentation-per-level 2) ; Set indentation level to 2 spaces
    (setq tab-width 8)  ; Org-mode parser forces tab-width to be 8
    (setq indent-tabs-mode nil)) ; Use spaces instead of tabs

  (add-hook 'org-mode-hook 'lv/org-mode-setup)
#+end_src

#+begin_src emacs-lisp
  ;; Adjust Evil's shift width for Org-mode
  (defun lv/org-mode-evil-setup ()
    "Set up Evil indentation for Org-mode."
    (setq evil-shift-width 2)) ; Set shift width to 2 spaces in Org-mode

  (add-hook 'org-mode-hook 'lv/org-mode-evil-setup)
#+end_src

** Behaviors
Enter /org-mode/ when creating a new org note.

#+begin_src emacs-lisp
  (add-hook 'org-roam-capture-new-node-hook 'org-mode)
#+end_src

* Package Add-ons
** Org-roam
Allow notes to take on a graph structure, linked together using backlings.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (concat lv/org-directory "/Zettelkasten"))
    (org-roam-dailies-directory (concat lv/org-directory "/Daily"))
    (org-roam-completion-everywhere t)
    (org-roam-database-connector 'sqlite-builtin)
    :config
    (org-roam-setup))

  ; TODO: Add 2 newlines after a new daily entry
  ; TODO: Make it's invokation cover a full window
  ;          - Full window refers to monitor environment of user
  ;          - Buffer refers to cursor local environment (Emacs buffer)

#+end_src

*** UI
~org-roam-ui~ allows us to visualize our Zettelkasten.

**** Pre-requisite
#+begin_src emacs-lisp
  (use-package websocket
    :ensure t
    :after org-roam)
#+end_src

**** Installation
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :ensure t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Mermaid Diagrams
#+begin_src emacs-lisp
  (use-package mermaid-mode
    :ensure t
    :mode "\\.mmd\\'"
    :config
    (setq mermaid-mmdc-location "mmdc"))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-mermaid
    :ensure t
    :after org
    :config
    (setq ob-mermaid-cli-path "mmdc")  ;; Path to mmdc in Nix
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((mermaid . t))))
#+end_src

Add =mermaid= to =orb-babel= languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((mermaid . t)))
#+end_src

** Calendar
#+begin_src emacs-lisp
  (use-package calfw
    :ensure t)

  (use-package calfw-org
    :ensure t
    :after (calfw org)
    :config
    (setq cfw:org-agenda-schedule-args '(:timestamp))
    (setq cfw:org-overwrite-default-keybinding t))
#+end_src

** Agenda
*** Agenda Directory
#+begin_src emacs-lisp
  (setq lv/org-agenda-path (concat lv/org-directory "/agenda.org"))
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-files (list lv/org-agenda-path))
#+end_src

*** Installation
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode))
#+end_src

** Webpage
Compiles =.org= files into HTML

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

** Citations
Add functionality for including citations

#+begin_src emacs-lisp
  (setq lv/bibliography-path (concat lv/org-directory "/references.bib"))
#+end_src

*** ~org-cite~
#+begin_src emacs-lisp
  (require 'oc)
  (require 'oc-basic)
  (require 'oc-csl)
#+end_src

#+begin_src emacs-lisp
  (setq org-cite-global-bibliography  (list lv/bibliography-path))
#+end_src

*** ~citar~
#+begin_src emacs-lisp
  (use-package citar
    :ensure t
    :custom
    (citar-bibliography (list lv/bibliography-path)))
#+end_src

*** ~org-ref~
#+begin_src emacs-lisp
  (use-package org-ref
    :ensure t
    :after org
    :config
    (setq
     org-ref-default-bibliography (list lv/bibliography-path)
     org-ref-pdf-directory (concat lv/org-directory "/PDFs")))
#+end_src

* Templates
** ~org-capture~ templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("c" "Calendar" entry
           (file+headline lv/org-agenda-path "Calendar")
           "* %?\n  %^T")))

  ; TODO: Make time of day optional. i.e. if I have a deadline for a specific day, I don't need to put in a specific hour of when it's due
  ;         as of right now, it defaults to the current time of day. You need to remove the time of day every entry which is annoying
#+end_src

** ~org-dailies~
Add a timestamp for every new daily entry.

#+begin_src emacs-lisp
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* [%<%H:%M:%S>] %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n#+author: Luis Victoria\n#+CREATED: %U\n\n"))))
#+end_src

* Text Rendering Preferences
** Show Leading Stars in Headers
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local org-hide-leading-stars nil)))
#+end_src

** Show Links
Editing links is a pain otherwise.

#+begin_src emacs-lisp
  (setq org-descriptive-links nil)
#+end_src

** Bullet Points
Replace the ~-~ symbol with ~•~.

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Automatically Render $LaTeX$ Fragments
We first need to check if $LaTeX$ packages are installed. We want to be robust and make this optional as these packages can get quite large.

#+begin_src emacs-lisp
  (defun lv/latex-packages-installed-p ()
    "Check if necessary LaTeX packages are installed."
    (executable-find "latex"))
#+end_src

Run the auto-rendering if the package is found

#+begin_src emacs-lisp
  (when (and (lv/latex-packages-installed-p)
             (display-graphic-p))
    (defun lv/org-latex-preview-auto ()
      "Automatically refresh LaTeX fragments in the current buffer."
      (when (derived-mode-p 'org-mode)
        (org-latex-preview '(16))))

    ;; Add hooks to automatically render LaTeX
    (add-hook 'org-mode-hook 'lv/org-latex-preview-auto)
    (add-hook 'after-save-hook 'lv/org-latex-preview-auto)
    (add-hook 'after-change-functions
              (lambda (_beg _end _len)
                (lv/org-latex-preview-auto)))

    ;; Scale LaTeX font
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5)))
#+end_src

** Render Entire Document Before Editing
Fixes bug where large enough jumps will result in code blocks not being rendered until both its ~#+begin_src~ and ~#+end_src~ tags are encountered.

#+begin_src emacs-lisp
  (defun lv-org-render-before-editing () "Render whole Org buffer before editing"
    (read-only-mode 1)   ; Make the buffer temporarily read-only
    (font-lock-ensure)   ; Ensure the whole buffer is rendered
    (read-only-mode -1)) ; Allow editing again

  (add-hook 'org-mode-hook 'lv-org-render-before-editing)
#+end_src

** Disable ~hl-line-mode~
Disables highlighting the line where the cursor is currently on.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (hl-line-mode -1)))
#+end_src

** Other
#+begin_src emacs-lisp
  (setq org-startup-indented t
        org-ellipsis "  " ; folding symbol
        org-pretty-entities t
        org-hide-emphasis-markers nil
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
#+end_src

* Evil Mode
** Save and Abort ~org-edit-special~ buffers with Vim Commands
Must edit ~#+begin_src~ code blocks through ~org-edit-special~ since indentations and syntax highlighting won't appear otherwise.

Normally can only save buffer with ={C-c '}= and abort with ={C-c C-k}=.

Now save with ~:w~ or ~:wq~, and abort with ~:q~ or ~:q!~.

#+begin_src emacs-lisp
  (defun lv/org-edit-src-save-only ()
    "Save changes in the special edit buffer without exiting."
    (interactive)
    (org-edit-src-save))

  (defun lv/org-edit-src-exit-save ()
    "Save changes and exit the special edit buffer."
    (interactive)
    (org-edit-src-exit))

  (defun lv/org-edit-src-abort ()
    "Abort the special edit without saving."
    (interactive)
    (org-edit-src-abort))

  (defun lv/setup-org-src-mode-evil-commands ()
    "Set up custom `:w`, `:wq`, and `:q` commands in `org-src-mode`."
    (evil-ex-define-cmd "w[rite]" 'lv/org-edit-src-save-only)
    (evil-ex-define-cmd "wq" 'lv/org-edit-src-exit-save)
    (evil-ex-define-cmd "q[uit]" 'lv/org-edit-src-abort))

  (defun lv/restore-evil-commands ()
    "Restore default `:w`, `:wq`, and `:q` Evil commands."
    (evil-ex-define-cmd "w[rite]" 'evil-write)
    (evil-ex-define-cmd "wq" 'evil-save-and-close)
    (evil-ex-define-cmd "q[uit]" 'evil-quit))

  (defun lv/setup-org-src-mode-hook ()
    "Hook to set up `org-src-mode`."
    ;; Set up custom commands for the current buffer only
    (lv/setup-org-src-mode-evil-commands)
    ;; Set up a buffer-local hook to restore commands on exit
    (add-hook 'kill-buffer-hook 'lv/restore-evil-commands nil t))

  ;; Add hook to org-src-mode to set up the custom commands
  (add-hook 'org-src-mode-hook 'lv/setup-org-src-mode-hook)
#+end_src

** Header Indentation
When pressing =>= or =<= on headers, have it change the bulletpoint level of the header.

Otherwise, performa a normal text indentation.

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :config
    (with-eval-after-load 'evil
      (defun lv/org-header-p ()
        "Check if the current line is an Org header."
        (save-excursion
          (beginning-of-line)
          (looking-at-p org-outline-regexp)))

      (defun lv/org-demote-or-indent ()
        "Demote Org header if on header, otherwise indent region or insert tab."
        (interactive)
        (if (lv/org-header-p)
            (org-demote-subtree)
          (evil-shift-right-line 1)))

      (defun lv/org-promote-or-outdent ()
        "Promote Org header if on header, otherwise outdent region or insert tab."
        (interactive)
        (if (lv/org-header-p)
            (org-promote-subtree)
          (evil-shift-left-line 1)))

      ;; Remap > and < to promote/demote header level in org-mode when on a header
      (evil-define-key 'normal org-mode-map
        (kbd ">") 'lv/org-demote-or-indent
        (kbd "<") 'lv/org-promote-or-outdent)))
#+end_src

** Automatically Enter Insert Mode when Inserting New Daily Entry
Original behavior is to enter in Normal Mode.

#+begin_src emacs-lisp
  (advice-add 'org-roam-dailies-capture-today :after (lambda (&rest _) (evil-insert-state)))
#+end_src

** Custom =RET= Behavior for Bullet Points
*** Normal Mode
Customize the =RET= key in Org mode to handle bullet points intelligently:
- Pressing =RET= on a non-empty bullet point creates a new bullet point.
- Pressing =RET= on an empty bullet point removes it and inserts a blank line.
- Elsewhere, =RET= inserts a new line as usual.

#+begin_src emacs-lisp
  (defun lv/org-return-dwim ()
    "Handle RET in Org mode with context-sensitive behavior.
  If at a bullet point:
  - If empty, delete the bullet.
  - If non-empty, insert a new bullet.
  Else, insert a newline."
    (interactive)
    (cond
     ;; If at an empty bullet point, remove it without adding a new line
     ((and (org-at-item-p)
           (save-excursion
             (beginning-of-line)
             (looking-at-p "^[ \t]*[-+*] \\(?:[ \t]*$\\)")))
      ;; Delete the entire line including the newline character
      (delete-region (line-beginning-position)
                     (line-beginning-position 2)))
     ;; If at a non-empty bullet point, insert a new bullet
     ((org-at-item-p)
      (org-insert-item))
     ;; Else, insert a newline
     (t
      (newline))))

  ;; Bind RET to our custom function in Org mode
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "RET") 'lv/org-return-dwim))
#+end_src
*** Evil Mode
- Do the same thing, but when going from Evil normal mode to insert mode
- More specifically, when pressing the =o= or =O= keys

#+begin_src emacs-lisp
  (defun lv/evil-org-insert-item-below ()
    "Insert a new item below the current one in Org mode or open a new line.
  If on a bullet point, insert a new item at the same level.
  Otherwise, perform `evil-open-below`."
    (interactive)
    (condition-case nil
        (if (org-at-item-p)
            (progn
              ;; Move to the end of the current line
              (end-of-line)
              ;; Insert a new item at the same level
              (org-insert-item)
              ;; Switch to insert mode
              (evil-insert-state))
          ;; Default behavior when not on a bullet point
          (evil-open-below 1))
      ;; In case of any error, fall back to default behavior
      (error (evil-open-below 1))))
#+end_src

#+begin_src emacs-lisp
  (defun lv/evil-org-insert-item-above ()
    "Insert a new item above the current one in Org mode or open a new line.
  If on a bullet point, insert a new item at the same level.
  Otherwise, perform `evil-open-above`."
    (interactive)
    (condition-case nil
        (if (org-at-item-p)
            (progn
              ;; Move to the beginning of the current line
              (beginning-of-line)
              ;; Insert a new item at the same level
              (org-insert-item)
              ;; Switch to insert mode
              (evil-insert-state))
          ;; Default behavior when not on a bullet point
          (evil-open-above 1))
      ;; In case of any error, fall back to default behavior
      (error (evil-open-above 1))))

#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'evil
    (evil-define-key 'normal org-mode-map
      (kbd "o") 'lv/evil-org-insert-item-below
      (kbd "O") 'lv/evil-org-insert-item-above))
#+end_src

* Keybindings
We have templates that we have defined in ~org-capture~. While we could just invoke ~org-capture~, we also have other documents that are not generated through this function. To have all possible generatable documents under one keystroke, we create a helper function to invoke the templates inside of ~org-capture~.

#+begin_src emacs-lisp
  (defun lv/capture-calendar-note ()
    "Capture an calendar note."
    (interactive)
    (org-capture nil "c"))
#+end_src

I also want dedicated keybindings.

#+begin_src emacs-lisp
  (defun lv/open-agenda-file ()
    (interactive)
    (find-file lv/org-agenda-path))
#+end_src

#+begin_src emacs-lisp
  (defun lv/org-roam-capture ()
    "Wrapper around org-roam-capture."
    (interactive)
    (org-roam-capture))
#+end_src

#+begin_src emacs-lisp
  (lv/leader-keys
    "o"   '(:ignore o                      :which-key "org")
    "oa"  '(lv/open-agenda-file            :which-key "open agenda")
    "oc"  '(:ignore oc                     :which-key "calendar")
    "oce" '(lv/capture-calendar-note       :which-key "entry")
    "occ" '(cfw:open-org-calendar          :which-key "open calendar")
    "od"  '(org-roam-dailies-goto-today    :which-key "view daily entries")
    "oe"  '(org-edit-special               :which-key "edit special")
    "oi"  '(:ignore oi                     :which-key "insert")
    "oic" '(org-cite-insert                :which-key "citation")
    "oii" '(org-id-get-create              :which-key "id")
    "oit" '(org-insert-structure-template  :which-key "template")
    "on"  '(:ignore on                     :which-key "new")
    "ona" '(lv/org-roam-capture            :which-key "atomic note")
    "onf" '(org-roam-dailies-capture-today :which-key "daily/fleeting note")
    "or"  '(:ignore or                     :which-key "roam")
    "ora" '(org-roam-alias-add             :which-key "add alias")
    "orf" '(org-roam-node-find             :which-key "find node")
    "ori" '(org-roam-node-insert           :which-key "insert node")
    "oru" '(org-roam-ui-mode               :which-key "UI")
    "ot"  '(:ignore ot                     :which-key "toggle")
    "oti" '(org-toggle-inline-images       :which-key "image")
    "otr" '(org-roam-buffer-toggle         :which-key "roam buffer")
    "ox"  '(org-ctrl-c-ctrl-c              :which-key "execute"))
#+end_src


* Fixes
** ~org-roam-capture~ spacebar bug
There is an incredibly annoying bug upon launching ~org-roam-capture~ that tries to perform completion upon pressing spacebar (and thus not allowing you to insert a space character). But if you launched /swiper/ and then launched ~org-roam-capture~, then it spacebar would work fine.

The following is a band-aid fix for the bug.

#+begin_src emacs-lisp
  (defun lv/org-roam-capture-force ()
    "Force org-roam-capture to accept spaces by bypassing the node reading."
    (interactive)
    (let ((title (read-string "Title: ")))
      (org-roam-capture- :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))

  ;; Use this as your main capture function
  (defalias 'lv/org-roam-capture 'lv/org-roam-capture-force)
#+end_src


* TODO Potential Future Features
- [[https://github.com/l3kn/org-fc][org-fc]] for spaced repetition (or flashcards)
- [[https://ditaa.sourceforge.net/][ditaa]] and/or [[https://www.graphviz.org/][graphviz]] for inserting diagrams to org-mode
  - See [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html][org ditaa]] and [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][org dot]] respectively
- [[https://github.com/alphapapa/org-ql][org-ql]] for searching org-files
  
